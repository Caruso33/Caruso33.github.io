{"version":3,"sources":["webpack:///./src/components/templates/Tags.js"],"names":["Tags","props","blogPost","data","allMarkdownRemark","edges","url","site","siteMetadata","siteUrl","tag","pageContext","title","description","pathname","location","moveTo","navigate","type","map","i","node","to","fields","slug","key","frontmatter","query"],"mappings":"2FAAA,kIA0CeA,UAnCf,SAAcC,GACZ,IAAMC,EAAWD,EAAME,KAAKC,kBAAkBC,MACxCC,EAAML,EAAME,KAAKI,KAAKC,aAAaC,QACjCC,EAAQT,EAAMU,YAAdD,IAER,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEE,MAAOF,EACPG,YAAW,0BAA4BH,EACvCJ,IAAKA,EACLQ,SAAUb,EAAMc,SAASD,WAG3B,kBAAC,IAAD,CACEE,OAAQ,SAAAD,GAAQ,OAAId,EAAMgB,SAASF,IACnCG,KAAK,UACLN,MAAM,YAGR,kBAAC,IAAD,KACE,kDAA2BF,GAE3B,6BACGR,EAASiB,KAAI,WAAWC,GAAX,IAAGC,EAAH,EAAGA,KAAH,OACZ,kBAAC,OAAD,CAAMC,GAAI,SAAWD,EAAKE,OAAOC,KAAMC,IAAKL,GACzCC,EAAKK,YAAYd,cAWzB,IAAMe,EAAK","file":"component---src-components-templates-tags-js-bff84c436f399873b8b2.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../partials/Layout\"\nimport AppBar from \"../partials/AppBar\"\nimport Metatags from \"../partials/MetaTags\"\nimport Container from \"../partials/Container\"\n\nfunction Tags(props) {\n  const blogPost = props.data.allMarkdownRemark.edges\n  const url = props.data.site.siteMetadata.siteUrl\n  const { tag } = props.pageContext\n\n  return (\n    <Layout>\n      <Metatags\n        title={tag}\n        description={`list of blogs with tag ${tag}`}\n        url={url}\n        pathname={props.location.pathname}\n      />\n\n      <AppBar\n        moveTo={location => props.navigate(location)}\n        type=\"tagList\"\n        title=\"TagList\"\n      />\n\n      <Container>\n        <h1>{`Available posts in ${tag}`}</h1>\n\n        <div>\n          {blogPost.map(({ node }, i) => (\n            <Link to={\"/blog/\" + node.fields.slug} key={i}>\n              {node.frontmatter.title}\n            </Link>\n          ))}\n        </div>\n      </Container>\n    </Layout>\n  )\n}\n\nexport default Tags\n\nexport const query = graphql`\n  query TagsQuery($tag: String!) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { eq: $tag } } }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`\n"],"sourceRoot":""}